require('./setup')();

describe('install', function () {
  var install = proxyquire('../lib/install', { './gitroot': function gitroot () {
    return './';
  }});

  it('warns when the target is not a git project', sinon.test(function () {
    fsStub({});
    var warn = this.stub(console, 'warn');
    install();
    expect(warn).to.have.been.calledWithMatch(/this does not seem to be a git project/i);
  }));

  it('creates hooks directory', function () {
    fsStub({ '.git': {} });
    install();
    expect(fs.existsSync('.git/hooks')).to.be.true;
  });

  it('creates hook files', function () {
    fsStub({ '.git/hooks': {} });
    install();

    var hooks = fs.readdirSync('.git/hooks');
    var hookContent = require('../lib/hook.template').content;
    var expectHook= function(hook, filename, permission){
      expect(hooks).to.include(hook);
      expect(fileContent(filename)).to.equal(hookContent);
      expect(fileMode(filename)).to.equal(permission);
    };

    //         hook                ,filename                       ,permission
    expectHook('applypatch-msg'    ,'.git/hooks/applypatch-msg'    ,'755');
    expectHook('pre-applypatch'    ,'.git/hooks/pre-applypatch'    ,'755');
    expectHook('post-applypatch'   ,'.git/hooks/post-applypatch'   ,'755');
    expectHook('pre-commit'        ,'.git/hooks/pre-commit'        ,'755');
    expectHook('prepare-commit-msg','.git/hooks/prepare-commit-msg','755');
    expectHook('commit-msg'        ,'.git/hooks/commit-msg'        ,'755');
    expectHook('post-commit'       ,'.git/hooks/post-commit'       ,'755');
    expectHook('pre-rebase'        ,'.git/hooks/pre-rebase'        ,'755');
    expectHook('post-checkout'     ,'.git/hooks/post-checkout'     ,'755');
    expectHook('post-merge'        ,'.git/hooks/post-merge'        ,'755');
    expectHook('pre-push'          ,'.git/hooks/pre-push'          ,'755');
    expectHook('pre-receive'       ,'.git/hooks/pre-receive'       ,'755');
    expectHook('update'            ,'.git/hooks/update'            ,'755');
    expectHook('post-receive'      ,'.git/hooks/post-receive'      ,'755');
    expectHook('post-update'       ,'.git/hooks/post-update'       ,'755');
    expectHook('pre-auto-gc'       ,'.git/hooks/pre-auto-gc'       ,'755');
    expectHook('post-rewrite'      ,'.git/hooks/post-rewrite'      ,'755');
  });

  describe('backing up existing hooks', function () {

    var existingGHook = '// Generated by ghooks. Do not edit this file.';
    var existingUserHook = '# existing content';

    beforeEach(function () {
      fsStub({ '.git/hooks': {
        'pre-commit': existingGHook,
        'pre-push': existingUserHook
      }});

      install();
      this.files = fs.readdirSync('.git/hooks');
    });

    it('does not keep a copy of an existing GHook', function () {
      expect(this.files).to.not.include('pre-commit.bkp');
      expect(this.files).to.include('pre-commit');
    });

    it('backs up an existing user hook', function () {
      expect(this.files).to.include('pre-push');
      expect(this.files).to.include('pre-push.bkp');
      expect(fileContent('.git/hooks/pre-push.bkp')).to.equal(existingUserHook);
    });

  });

});
